<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quiz</title>
    <style>
      body {
        font-family: 'Times New Roman', Times, serif;
        margin: 20px;
      }

      #quiz-container {
        max-width: 600px;
        margin: 0 auto;
      }

      .question-container {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .option {
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
      }

      .option.selected {
        border-color: blue;
      }

      .option.correct {
        /* Bu sınıf doğru cevabı işaretlemek için kullanılacak, arka plan rengi JavaScript ile ayarlanacak */
      }

      .option.locked {
        pointer-events: none; /* Tıklanamaz hale getir */
      }

      .option.correct::after {
        content: " ✔️";
      }

      .option.wrong::after {
        content: " ❌";
      }

      .center-button {
        display: flex;
        justify-content: center;
        margin-top: 25px; /* Kareler ile düğme arasına boşluk ekleyin */
      }
      .soruKare {
        width: 30px;
        height: 30px;
        display: inline-block;
        margin: 5px;
        border: 1px solid black;
        text-align: center;
        line-height: 30px;
      }
      .cevapSecenegi {
        display: block;
        margin-bottom: 10px;
        border: 1px solid #cecece;
        padding: 10px;
        cursor: pointer;
        border-radius: 10px; /* Köşe yarıçapını belirtin */
        background-color: rgb(239, 239, 239);
      }
      .selectedAnswer {
        background-color: #007bff;
        color: white;
      }
      @media only screen and (max-width: 600px) {
        /* Küçük ekranlar için stil ayarları */
        .cevapSecenegi {
          width: 90%; /* Mobil cihazlarda tam genişlik */
        }
      }
      #soruSayisi {
        text-align: center;
        margin-top: 20px;
        font-size: 18px;
      }
      #buttonDiv {
        display: flex;
        justify-content: space-between; /* İç divleri sağa ve ortaya hizalar */
        align-items: center; /* Ögeleri dikeyde ortalar */
        margin-top: 20px;
        margin-right: 2%; /* Sağ kenardan biraz içeri al */
      }
      #soruBasligi {
        margin: 0; /* Varsayılan marginleri kaldırır */
        font-size: 14px; /* Yazı boyutunu ayarlar */
      }
      #nextButton {
        padding: 10px 20px;
        cursor: pointer;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 8px;
        font-size: 16px;
      }
      #soruAlani {
        margin-top: 30px; /* Yukarıda boşluk oluşturur */
        padding-top: 0px; /* Üst kısmında iç boşluk bırak */
        border-top: 1px solid #ccc; /* Üst kısmında sınır çizgisi oluşturur */
        position: relative; /* Pozisyonu ayarlar */
      }
      #quizAlani {
        display: flex;
        flex-direction: column; /* Dikey hizalama için */
        align-items: center; /* Yatayda ortalamak için */
      }
      #timerDiv {
        margin-top: -86px; /* Yukarıda boşluk oluşturur */
        margin-bottom: -30px; /* Aşağıda boşluk oluşturur */
        display: flex;
        justify-content: center; /* İçeriği yatayda ortalar */
        width: 100%; /* Tam genişlik kapsar */
      }
      img {
        max-width: 100%; /* Resmin maksimum genişliği ekran genişliğine eşit olacak */
        height: auto; /* Yükseklik otomatik olarak ayarlanacak */
      }
      .flex-grow {
        flex-grow: 1; /* Bu div'in kalan alanı doldurmasına izin verir */
        text-align: center; /* İçindeki içeriği ortalar */
      }
      #buttonContainer {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
      #startButton,
      #proceedButtonBottom,
      #proceedButton {
        display: none;
        background-color: #007bff; /* Düğmenin içi mavi olacak */
        color: white; /* Yazı rengi beyaz olacak */
        border: none; /* Sınır çizgisi kaldırılacak */
        padding: 10px 50px; /* İç boşluk verilecek */
        font-size: 14px; /* Yazı boyutu ayarlanacak */
        cursor: pointer; /* İmleç düğme üzerine geldiğinde el simgesi olacak */
        border-radius: 8px; /* Köşeler yuvarlatılacak */
      }
      /* Yeni eklenen mesaj alanı */
      #additionalMessage {
        display: none;
        text-align: left; /* Metnin hizalanması */
        margin-top: 20px;
        font-size: 14px;
        color: black; /* Mesaj metnini siyah yap */
      }
      /* messageArea için yeni stil */
      #messageArea {
        display: none; /* Başlangıçta gizle */
        text-align: left; /* Metnin hizalanması */
        margin-top: 20px;
        font-size: 14px;
        color: black; /* Mesaj metnini siyah yap */
      }
      /* Timer stili */
      .base-timer {
        position: relative;
        width: 100px; /* Genişliği küçülttük */
        height: 100px; /* Yüksekliği küçülttük */
        margin: 0 auto; /* Yatay ortalama */
        padding: 0; /* İç boşlukları sıfırla */
        margin-top: 10px; /* Üst boşluğu ayarla */
        margin-bottom: 10px; /* Alt boşluğu ayarla */
      }

      .base-timer__svg {
        transform: scaleX(-1);
      }

      .base-timer__circle {
        fill: none;
        stroke: none;
      }

      .base-timer__path-elapsed {
        stroke-width: 5px;
        stroke: grey;
      }

      .base-timer__path-remaining {
        stroke-width: 5px;
        stroke-linecap: round;
        transform: rotate(90deg);
        transform-origin: center;
        transition: 1s linear all;
        fill-rule: nonzero;
        stroke: currentColor;
      }

      .base-timer__path-remaining.green {
        color: rgb(65, 184, 131);
      }

      .base-timer__path-remaining.orange {
        color: orange;
      }

      .base-timer__path-remaining.red {
        color: red;
      }

      .base-timer__label {
        position: absolute;
        width: 100px; /* Genişliği ayarlayın */
        height: 100px; /* Yüksekliği ayarlayın */
        top: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px; /* Font boyutunu ayarlayın */
      }
    </style>
  </head>
  <body>
    <!-- TEST-1 ve teste başla düğmeleri -->
    <button id="test1Button" onclick="showMessage()">TEST-1</button>

    <!-- Mesaj alanı -->
    <div id="messageArea" style="display: none">
      <h4>THEORY EXAM EXPLANATION</h4>
      <p>
        Welcome to the theory exam for passenger cars. This theory exam consists
        of three sections: hazard perception, knowledge and insight.
      </p>
      <p>
        To pass this exam, you must pass each section individually. After the
        exam, you will immediately see whether you passed or failed, and how
        well you performed in each section.
      </p>
      <h4>Good luck with the exam!</h4>
    </div>

    <!-- Yeni eklenen mesaj alanı -->
    <div id="additionalMessage">
      <h4>EXPLANATION OF HAZARD PERCEPTION</h4>
      <p>
        In this section, you will have 8 seconds to answer each question. As
        long as the timer is running, you can still answer the question. If you
        do not answer in time, the question will be marked wrong. You cannot go
        back to the previous question.
      </p>
      <p>
        Each question will present several choices for how you think you should
        react to certain scenarios:<br />
        - Brake.<br />
        - Release accelerator.<br />
        - Nothing.<br />
      </p>
      <p>
        For each question, assume you are the driver. On the dashboard, you can
        see the speed at which you are driving. If you are changing direction,
        you will see an indicator. You can see the traffic behind you in the
        rear-view mirror.
      </p>
    </div>

    <div id="buttonContainer">
      <button id="startButton" onclick="showProceedButton()">
        START THE THEORY EXAM
      </button>
      <button id="proceedButton" onclick="startQuiz()">PROCEED1</button>
    </div>

    <!-- Quiz alanını içeren bir div oluşturalım -->
    <div id="quizAlani" style="display: none">
      <!-- Soru alanı -->
      <div id="soruAlani">
        <!-- Zamanlayıcı alanı -->
        <div id="timerDiv">
          <div id="app"></div>
        </div>
        <div id="soruResmi"></div>
        <!-- Soru resmi alanı -->
        <div id="cevaplar">
          <!-- Soru metni ve cevapları burada gösterilecek -->
        </div>
        <div id="buttonDiv">
          <div class="flex-grow">
            <h2 id="soruBasligi"></h2>
          </div>
          <button id="nextButton" onclick="nextQuestion()">Next</button>
        </div>
      </div>
    </div>

    <!-- Sonuç gösterme alanı -->
    <div id="sonucAlani" style="display: none">
      <h2>Quiz Sonucu</h2>
      <div id="sonuc"></div>
    </div>

    <!-- JavaScript kodunu buraya ekleyin -->
    <script>
      var soruBankasi = []; // Soru bankası
      var soruIndex = 0; // Şu anki soru index'i
      var siraliSorular = []; // Rastgele sırayla sorular
      var cevapDurumu = []; // Soruların cevap durumu
      var dogruCevaplar = []; // Doğru cevaplar
      var dogruYanlisDurumu = []; // Soruların doğru, yanlış, cevaplanmamış durumu
      var secilenCevaplar = []; // Kullanıcının seçtiği cevaplar
      var timerInterval; // Zamanlayıcı

      // JSON formatındaki soru bankası dosyasının URL'si
      var soruBankasiURL =
        "https://4b688f47-79ef-4ce7-8524-c798a9ad084b.usrfiles.com/ugd/4b688f_d609e809d3704a7fbc7ed1c71cebf6c6.json";

      // TEST-1 butonuna tıklandığında
      function showMessage() {
        document.getElementById("messageArea").style.display = "block";
        document.getElementById("startButton").style.display = "block";
        document.getElementById("test1Button").style.display = "none"; // TEST-1 düğmesini gizle
      }

      // "START THE THEORY EXAM" butonuna tıklandığında "PROCEED" butonunu göster ve mesajı görüntüle
      function showProceedButton() {
        document.getElementById("messageArea").style.display = "none";
        document.getElementById("startButton").style.display = "none";
        document.getElementById("proceedButton").style.display = "block";
        document.getElementById("additionalMessage").style.display = "block"; // Mesajı göster
      }

      // "PROCEED" butonuna tıklandığında quiz'i başlat ve mesajı gizle
      function startQuiz() {
        document.getElementById("proceedButton").style.display = "none";
        document.getElementById("quizAlani").style.display = "block";
        document.getElementById("additionalMessage").style.display = "none"; // Mesajı gizle
        fetch(soruBankasiURL)
          .then((response) => response.json())
          .then((data) => {
            soruBankasi = data;
            // Soruları rastgele sıraya yerleştir
            siraliSorular = shuffleArray(soruBankasi).slice(0, 25); // İlk 25 soruyu al
            cevapDurumu = Array(siraliSorular.length).fill(false); // Tüm cevapları başlangıçta false olarak işaretle
            dogruYanlisDurumu = Array(siraliSorular.length).fill("unanswered"); // Tüm soruları başlangıçta cevaplanmamış olarak işaretle
            secilenCevaplar = Array(siraliSorular.length).fill(null); // Tüm soruları başlangıçta boş olarak işaretle
            showNextQuestion();
          })
          .catch((error) => {
            console.error("Soru bankası dosyası alınamadı: ", error);
          });
      }

      // Soruları rastgele sıraya yerleştirmek için
      function shuffleArray(array) {
        var shuffledArray = array.slice();
        for (var i = shuffledArray.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = shuffledArray[i];
          shuffledArray[i] = shuffledArray[j];
          shuffledArray[j] = temp;
        }
        return shuffledArray;
      }

      // Sonraki soruya geçmek için
      function nextQuestion() {
        clearTimeout(timerInterval); // Zamanlayıcıyı sıfırla
        checkAnswer(); // Cevabı kontrol et
        soruIndex++;
        if (soruIndex < siraliSorular.length) {
          showNextQuestion();
        } else {
          quizBitir();
        }
      }

      // Şu anki soruyu göstermek için güncellenmiş fonksiyon
      function showNextQuestion() {
        clearTimeout(timerInterval); // Mevcut zamanlayıcıyı temizleyin (önemli!)
        var soru = siraliSorular[soruIndex];
        document.getElementById("soruBasligi").innerText =
          "QUESTION " +
          (soruIndex + 1) +
          " OF " +
          siraliSorular.length +
          ": " +
          soru.soru;

        // Soru resmini göster
        document.getElementById("soruResmi").innerHTML =
          '<img src="' + soru.resim + '" alt="Soru Resmi">';

        var cevaplarHTML = "";
        soru.cevaplar.forEach(function (cevap, index) {
          cevaplarHTML +=
            '<label class="cevapSecenegi"><input type="radio" name="cevap" value="' +
            cevap +
            '" onclick="highlightSelected(this)">' +
            cevap +
            "</label>";
        });
        document.getElementById("cevaplar").innerHTML = cevaplarHTML;

        // Eğer ilgili soru daha önce cevaplandıysa işaretli cevabı göster
        if (secilenCevaplar[soruIndex] !== null) {
          var cevaplar = document.getElementsByName("cevap");
          for (var i = 0; i < cevaplar.length; i++) {
            if (cevaplar[i].value === secilenCevaplar[soruIndex]) {
              cevaplar[i].checked = true;
              highlightSelected(cevaplar[i]); // Seçili cevabı vurgula
            }
          }
        }

        startTimer(); // Zamanlayıcıyı yeniden başlat
      }

      // Zamanlayıcıyı başlatmak için
      function startTimer() {
        const FULL_DASH_ARRAY = 126; // 2 * Math.PI * 20 (yeni yarıçap)
        const WARNING_THRESHOLD = 10;
        const ALERT_THRESHOLD = 5;

        const COLOR_CODES = {
          info: {
            color: "green",
          },
          warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD,
          },
          alert: {
            color: "red",
            threshold: ALERT_THRESHOLD,
          },
        };

        const TIME_LIMIT = 8;
        let timePassed = 0;
        let timeLeft = TIME_LIMIT;
        let remainingPathColor = COLOR_CODES.info.color;

        document.getElementById("app").innerHTML = `
    <div class="base-timer">
        <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <g class="base-timer__circle">
                <circle class="base-timer__path-elapsed" cx="50" cy="50" r="20"></circle> <!-- Yeni yarıçap -->
                <path
                    id="base-timer-path-remaining"
                    stroke-dasharray="126"
                    class="base-timer__path-remaining ${remainingPathColor}"
                    d="
                    M 50, 50
                    m -20, 0
                    a 20,20 0 1,0 40,0
                    a 20,20 0 1,0 -40,0
                    "
                ></path>
            </g>
        </svg>
        <span id="base-timer-label" class="base-timer__label">${formatTime(
          timeLeft
        )}</span>
    </div>
    `;

        timerInterval = setInterval(() => {
          timePassed += 1;
          timeLeft = TIME_LIMIT - timePassed;
          document.getElementById("base-timer-label").innerHTML =
            formatTime(timeLeft);
          setCircleDasharray();
          setRemainingPathColor(timeLeft);

          if (timeLeft === 0) {
            clearInterval(timerInterval);
            nextQuestion(); // Süre bittiğinde sonraki soruya geç
          }
        }, 1000);

        function formatTime(time) {
          const minutes = Math.floor(time / 60);
          let seconds = time % 60;

          if (seconds < 10) {
            seconds = `0${seconds}`;
          }

          return `${minutes}:${seconds}`;
        }

        function setRemainingPathColor(timeLeft) {
          const { alert, warning, info } = COLOR_CODES;
          if (timeLeft <= alert.threshold) {
            document
              .getElementById("base-timer-path-remaining")
              .classList.remove(warning.color);
            document
              .getElementById("base-timer-path-remaining")
              .classList.add(alert.color);
          } else if (timeLeft <= warning.threshold) {
            document
              .getElementById("base-timer-path-remaining")
              .classList.remove(info.color);
            document
              .getElementById("base-timer-path-remaining")
              .classList.add(warning.color);
          }
        }

        function calculateTimeFraction() {
          const rawTimeFraction = timeLeft / TIME_LIMIT;
          return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
        }

        function setCircleDasharray() {
          const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
          ).toFixed(0)} 126`;
          document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
        }
      }

      // Quiz'i bitirmek için
      function quizBitir() {
        clearInterval(timerInterval); // Zamanlayıcıyı durdur
        var cevaplananSoruSayisi = cevapDurumu.filter(Boolean).length;
        var cevaplanmayanSoruSayisi = cevapDurumu.length - cevaplananSoruSayisi;

        var sonucHTML = "<h4>END HAZARD PERCEPTION</h4>";
        sonucHTML +=
          "<p>Number of Answered Questions: " + cevaplananSoruSayisi + "</p>";
        sonucHTML +=
          "<p>Number of Unanswered Questions: " +
          cevaplanmayanSoruSayisi +
          "</p>";
        sonucHTML += "<h4>OVERVIEW</h4>";
        sonucHTML += '<div id="cevaplanmaBlok">';
        for (var i = 0; i < cevapDurumu.length; i++) {
          sonucHTML +=
            '<div class="soruKare" style="background-color: ' +
            (cevapDurumu[i] ? "lightgray" : "transparent") +
            '">';
          sonucHTML += i + 1; // Soru numarasını karenin içine ekle
          sonucHTML += "</div>";
          if ((i + 1) % 9 == 0) {
            sonucHTML += "<br>"; // Her 9 karede bir satırı değiştir
          }
        }
        sonucHTML += '</div><div id="dogruYanlisBlok">';
        for (var i = 0; i < dogruYanlisDurumu.length; i++) {
          let color;
          if (dogruYanlisDurumu[i] === "correct") color = "#00FF00";
          else if (dogruYanlisDurumu[i] === "incorrect") color = "red";
          else color = "transparent";

          // Kareyi tıklanabilir ve ilgili soruya gitmek için data-index ekle
          sonucHTML +=
            '<div class="soruKare" style="background-color: ' +
            color +
            '" data-index="' +
            i +
            '" onclick="goToQuestion(event)">';
          sonucHTML += i + 1; // Soru numarasını karenin içine ekle
          sonucHTML += "</div>";
          if ((i + 1) % 9 == 0) {
            sonucHTML += "<br>"; // Her 9 karede bir satırı değiştir
          }
        }
        sonucHTML += "</div>";

        // Proceed düğmesini sonuç alanının sonuna ekle ve ortala
        sonucHTML +=
          '<div class="center-button"><button id="proceedButtonBottom" onclick="showKnowledgeExplanation()">PROCEED2</button></div>';

        document.getElementById("sonucAlani").innerHTML = sonucHTML;
        document.getElementById("sonucAlani").style.display = "block";
        document.getElementById("quizAlani").style.display = "none"; // Quiz alanını gizle
        document.getElementById("proceedButtonBottom").style.display = "block";
      }

      // Kareleri tıklanabilir ve ilgili soruya gitmek için işlev
      function goToQuestion(event) {
        var questionIndex = parseInt(event.target.getAttribute("data-index"));
        soruIndex = questionIndex; // İlgili soru indeksini güncelle
        document.getElementById("sonucAlani").style.display = "none"; // Sonuç alanını gizle
        document.getElementById("quizAlani").style.display = "block"; // Quiz alanını göster
        showNextQuestion(); // İlgili soruyu göster
      }

      // Bilgi açıklama bölümünü gösteren işlev
      function showKnowledgeExplanation() {
        document.getElementById("proceedButtonBottom").style.display = "none"; // İlk düğmeyi gizle

        // Bilgi açıklama içeriklerini ekle
        var explanationHTML = "<h4>KNOWLEDGE EXPLANATION</h4>";
        explanationHTML += "<p>Explanation paragraph 1.</p>";
        explanationHTML += "<p>Explanation paragraph 2.</p>";
        explanationHTML += "<p>Explanation paragraph 3.</p>";
        explanationHTML += "<p>Explanation paragraph 4.</p>";

        // "dogruYanlisBlok"u göster (zaten quizBitir fonksiyonunda ekledik)
        explanationHTML += document.getElementById("dogruYanlisBlok").outerHTML;

        // Yeni proceed butonu
        explanationHTML +=
          '<div class="center-button"><button id="proceedKnowledgeButton" onclick="showStartKnowledge()">PROCEED</button></div>';

        document.getElementById("sonucAlani").innerHTML = explanationHTML;
        document.getElementById("proceedKnowledgeButton").style.display =
          "block"; // Yeni düğmeyi göster
      }

      // Knowledge başlangıç bölümünü gösteren işlev
      function showStartKnowledge() {
        document.getElementById("proceedKnowledgeButton").style.display =
          "none"; // İkinci düğmeyi gizle

        // Bilgi başlangıç içeriklerini ekle
        var startKnowledgeHTML = "<h4>START KNOWLEDGE</h4>";
        startKnowledgeHTML += "<p>Start paragraph 1.</p>";
        startKnowledgeHTML += "<p>Start paragraph 2.</p>";
        startKnowledgeHTML += "<p>Start paragraph 3.</p>";
        // Yeni proceed butonu
        startKnowledgeHTML +=
          '<div class="center-button"><button id="proceedToFirstQuestionButton" onclick="startFirstQuestion()">PROCEED TO THE FIRST QUESTION</button></div>';

        document.getElementById("sonucAlani").innerHTML = startKnowledgeHTML;
        document.getElementById("proceedToFirstQuestionButton").style.display =
          "block"; // Yeni düğmeyi göster
      }

      // İlk soruya başlamayı sağlayan işlev
      function startFirstQuestion() {
        document.getElementById("proceedToFirstQuestionButton").style.display =
          "none"; // Üçüncü düğmeyi gizle
        // İlk soruya yönlendirme vs. işlemlerini burada yapabilirsiniz
        alert("Proceeding to the first question...");
        // Burada gerekli işlemleri yapabilirsiniz.
      }

      // Cevapları kontrol etmek için
      function checkAnswer() {
        var cevaplar = document.getElementsByName("cevap");
        var currentQuestion = siraliSorular[soruIndex];
        for (var i = 0; i < cevaplar.length; i++) {
          if (cevaplar[i].checked) {
            cevapDurumu[soruIndex] = true; // Cevaplandı olarak işaretle
            secilenCevaplar[soruIndex] = cevaplar[i].value; // Seçili cevabı kaydet
            if (
              cevaplar[i].value.trim() === currentQuestion.dogruCevap.trim()
            ) {
              dogruYanlisDurumu[soruIndex] = "correct"; // Doğru olarak işaretle
            } else {
              dogruYanlisDurumu[soruIndex] = "incorrect"; // Yanlış olarak işaretle
            }
            return;
          }
        }
        // Cevaplanmadı olarak işaretle
        dogruYanlisDurumu[soruIndex] = "unanswered";
        cevapDurumu[soruIndex] = false;
        secilenCevaplar[soruIndex] = null; // Seçili cevabı boş olarak ayarla
      }

      // Seçili cevabı vurgulamak için
      function highlightSelected(radio) {
        var labels = document.getElementsByClassName("cevapSecenegi");
        for (var i = 0; i < labels.length; i++) {
          labels[i].classList.remove("selectedAnswer");
        }
        radio.parentElement.classList.add("selectedAnswer");
      }
    </script>
  </body>
</html>
